.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "CXIBWCHECK" "1" "" "Cxibwcheck User Manual" "Version 1.5"
.hy
.SH NAME
.PP
cxibwcheck.sh - network diagnostic support script
.SH SYNOPSIS
.PP
cxibwcheck.sh [-hbvV][-d \f[I]device\f[R]][-t \f[I]secs\f[R]]
\f[I]nodelist\f[R]
.SH DESCRIPTION
.PP
The Cassini NIC diagnostic, cxibwcheck.sh, is a testing script that
helps with identifying network issues with Cassini during initial setup
of systems; after the fabric is installed and setup, but before other
higher level services can be installed.
The script relies on the libcxi library and Cassini drivers to run and
intended for use by administrator, therefore requiring root privileges.
This script can be modified by the site based on customer requirements.
.SS Tests
.PP
The cxibwcheck.sh script uses the diagnostic tools provided by the
libcxi libraries to execute a full loopback test that sends test packets
from the node, out to the Rosetta switch, and then back to the node.
The test is run over all selected nodes and, if in a multi-NIC system,
will loop over all Cassini devices on the selected nodes.
The test is run in parallel across all selected nodes, but can only test
a single Cassini device on the node at a time.
This loopback test ideally helps with identifying issues during initial
setup of systems, before the fabric or other higher level services can
be installed.
On nodes with GPUs, GPU memory will be used by default.
.PP
Users can run cxibwcheck.sh using Slurm or PDSH.
Using Slurm allows the user to check the bandwidth only on compute
nodes, while using PDSH allows the user to verify all nodes where a
Cassini NIC is installed, including non-compute nodes.
.SH OPTIONS
.TP
-b
Broadcast out a copy of the script to all nodes selected for the test.
The script will be placed at /tmp/cxibwcheck.sh
.TP
-c \f[I][server_core]:[client_core]\f[R]
Specify the core offsets (relative to the NIC\[cq]s nearest NUMA
node\[cq]s cpulist) to use for the server and client runs of
cxi_write_bw.
Default is an offset of 1 for the server and 2 for the client (1:2).
.TP
-C
Runs the PCIe speed and width check over each selected node.
This will also check if a node supports ESM mode and will then see if
the reported speed and width match what\[cq]s expected.
NOTE - must have root permissions to run this check or it will error
out.
.TP
-d \f[I]device\f[R]
Select a specific Cassini NIC to run the test over.
The default is to run across all Cassini NICs.
.TP
-D
Delete all /tmp log files on the nodes and exit.
.TP
-g
Disable the use of GPU memory.
.TP
-p \f[I]port\f[R]
.IP
.nf
\f[C]
Select a specific port to run on. The default will start with trying port 18523, and if that port is in use, the script will try random ports within the range 1024 to 50175.
\f[R]
.fi
.TP
-t \f[I]seconds\f[R]
Specify runtime for the test to run on each Cassini NIC.
The default time is 30 seconds.
.TP
-V
Displays the version number of the test.
.TP
-v
Sets the output of the test to verbose mode.
Can be passed up to 4 times.
.SH OPERANDS
.TP
\f[I]nodelist\f[R]
List of nodes on which to run, specified in pdsh format
(e.g.\ x1000c0s[0-7]b[0-1]n[0-1]).
.SH EXAMPLES
.PP
The script, cxibwcheck.sh will give a pass or fail based on all nodes
giving passing results.
A typical run, on a dual Cassini system, will look like the following:
.IP
.nf
\f[C]
    \[ti]> cxibwcheck.sh nid[000007-000023]
    cxibwcheck.sh: firmware version: 1.6.0.350 
    Hosts = 17 Count = 34 Skipped = 0 Failed = 0 Missing = 0
    Min = 39903 Mean = 40343 Max = 40866
    cxibwcheck.sh: Test passed
\f[R]
.fi
.IP \[bu] 2
Using the verbosity setting, you can get additional information based on
the setting you use.
With verbosity of one, the performance data will be displayed:
.RS 2
.IP
.nf
\f[C]
  \[ti]> cxibwcheck.sh -v nid[000007-000023]
  cxibwcheck.sh: firmware version: 1.6.0.350 
  nid000016: cxi0: 40018
  nid000020: cxi0: 40360
  nid000007: cxi0: 40310
  nid000013: cxi0: 40246
  nid000009: cxi0: 40286
  nid000012: cxi0: 40245
  nid000011: cxi0: 40329
  nid000019: cxi0: 40258
  nid000022: cxi0: 40177
  nid000015: cxi0: 40328
  nid000018: cxi0: 40219
  nid000014: cxi0: 40284
  nid000008: cxi0: 40447
  nid000017: cxi0: 40279
  nid000023: cxi0: 40349
  nid000021: cxi0: 40114
  nid000010: cxi0: 40199
  nid000016: cxi1: 40247
  nid000007: cxi1: 40364
  nid000012: cxi1: 40401
  nid000013: cxi1: 40792
  nid000009: cxi1: 40342
  nid000020: cxi1: 40479
  nid000019: cxi1: 40732
  nid000018: cxi1: 40368
  nid000011: cxi1: 40813
  nid000022: cxi1: 40466
  nid000015: cxi1: 40711
  nid000017: cxi1: 40221
  nid000023: cxi1: 40223
  nid000008: cxi1: 40209
  nid000014: cxi1: 40502
  nid000010: cxi1: 40446
  nid000021: cxi1: 40515
  Hosts = 17 Count = 34 Skipped = 0 Failed = 0 Missing = 0
  Min = 40018 Mean = 40361 Max = 40813
  cxibwcheck.sh: Test passed
\f[R]
.fi
.RE
.PP
Verbosity of 2 and 3 will give additional information on the test and
work when running locally or with slurm.
When verbosity of 4 is given and the test uses pdsh, the output will be
sorted by hostname.
.IP \[bu] 2
If any Cassini falls outside of 95% of the mean value of all tested
cards, or below 35000 MB/s, the Cassini will be flagged with a warning
and the test will give a failed result.
Each Cassini that gives a performance warning will be called out as so:
.RS 2
.IP
.nf
\f[C]
  \[ti]> cxibwcheck.sh -v nid[000002-000028,000033-000064]
  cxibwcheck.sh: errors in nodelist (see /tmp/cxibwcheck.sh.log.137959) 59 remain
  cxibwcheck.sh: firmware version: 1.4.275
  nid000015: cxi0: 40163.32
  nid000007: cxi0: 39969.02
  nid000003: cxi0: 40116.38
  nid000012: cxi0: 40238.95
  nid000024: cxi0: 40258.36
  nid000006: cxi0: 40249.92
  nid000004: cxi0: 40239.23
  nid000010: cxi0: 40207.40
  nid000020: cxi0: 40153.18
  nid000022: cxi0: 40293.43
  nid000009: cxi0: 39939.31
  nid000036: cxi0: 40264.58
  nid000018: cxi0: 40271.22
  nid000005: cxi0: 40389.73
  nid000021: cxi0: 40203.54
  nid000002: cxi0: 40342.65
  nid000011: cxi0: 40185.18
  nid000019: cxi0: 40319.90
  nid000014: cxi0: 40274.92
  nid000040: cxi0: 40468.11
  nid000035: cxi0: 39992.85
  nid000016: cxi0: 40333.10
  nid000023: cxi0: 40255.83
  nid000042: cxi0: 40534.02
  nid000027: cxi0: 40178.32
  nid000033: cxi0: 40246.21
  nid000025: cxi0: 40125.38
  nid000017: cxi0: 40143.44
  nid000013: cxi0: 40233.53
  nid000008: cxi0: 40162.51
  nid000047: cxi0: 40371.66
  nid000038: cxi0: 40890.99
  nid000045: cxi0: 40477.95
  nid000028: cxi0: 40233.11
  nid000037: cxi0: 40689.19
  nid000043: cxi0: 40342.67
  nid000026: cxi0: 39992.56
  nid000044: cxi0: 40735.64
  nid000052: cxi0: 40178.25
  nid000049: cxi0: 40376.40
  nid000061: cxi0: 40477.76
  nid000034: cxi0: 40759.62
  nid000059: cxi0: 40575.90
  nid000046: cxi0: 40031.74
  nid000039: cxi0: 40305.22
  nid000041: cxi0: 40255.41
  nid000054: cxi0: 40232.36
  nid000050: cxi0: 40300.85
  nid000053: cxi0: 40364.34
  nid000058: cxi0: 40639.00
  nid000056: cxi0: 40587.60
  nid000057: cxi0: 40466.46
  nid000055: cxi0: 40302.55
  nid000060: cxi0: 40031.19
  nid000062: cxi0: 40689.54
  nid000064: cxi0: 40470.45
  nid000051: cxi0: 40279.32
  nid000048: cxi0: 40573.92
  nid000063: cxi0: 40674.35
  nid000015: cxi1: 40113.17
  nid000003: cxi1: 40109.38
  nid000006: cxi1: 40263.76
  nid000012: cxi1: 40146.95
  nid000004: cxi1: 40170.67
  nid000007: cxi1: 40289.66
  nid000024: cxi1: 40462.07
  nid000010: cxi1: 40346.36
  nid000020: cxi1: 40451.01
  nid000036: cxi1: 40232.83
  nid000009: cxi1: 40116.06
  nid000022: cxi1: 40260.30
  nid000018: cxi1: 40154.26
  nid000005: cxi1: 40035.37
  nid000021: cxi1: 40101.46
  nid000002: cxi1: 40172.36
  nid000011: cxi1: 40276.14
  nid000019: cxi1: 40080.43
  nid000040: cxi1: 40255.75
  nid000035: cxi1: 40323.64
  nid000014: cxi1: 40244.09
  nid000016: cxi1: 40229.49
  nid000023: cxi1: 40408.80
  nid000042: cxi1: 40789.29
  nid000033: cxi1: 40751.83
  nid000025: cxi1: 40354.50
  nid000017: cxi1: 40484.45
  nid000008: cxi1: 40219.64
  nid000013: cxi1: 39996.36
  nid000038: cxi1: 40385.72
  nid000045: cxi1: 40317.09
  nid000047: cxi1: 39939.06
  nid000027: cxi1: 40157.22
  nid000026: cxi1: 40241.08
  nid000043: cxi1: 40506.17
  nid000044: cxi1: 40528.50
  nid000028: cxi1: 40437.92
  nid000037: cxi1: 40395.26
  nid000052: cxi1: 40282.10
  nid000049: cxi1: 40541.87
  nid000034: cxi1: 40632.60
  nid000046: cxi1: 40300.73
  nid000039: cxi1: 40392.83
  nid000053: cxi1: 40518.63
  nid000061: cxi1: 40449.66
  nid000058: cxi1: 40120.75
  nid000041: cxi1: 40387.56
  nid000054: cxi1: 40368.39
  nid000056: cxi1: 40281.14
  nid000057: cxi1: 40066.33
  nid000050: cxi1: 40321.98
  nid000055: cxi1: 40323.03
  nid000059: cxi1: 9999.65
  nid000060: cxi1: 40724.94
  nid000062: cxi1: 40379.75
  nid000064: cxi1: 40813.74
  nid000051: cxi1: 40220.51
  nid000048: cxi1: 40284.44
  nid000063: cxi1: 40157.98
  Hosts = 59 Count = 118 Skipped = 0 Failed = 0 Missing = 0
  Min = 10000 Mean = 40062 Max = 40891
  nid000059: cxi1: bandwidth is low 10000 MB/s (24%)
  Test failed to start on some nodes (see /tmp/cxibwcheck.sh.log.137959)
\f[R]
.fi
.PP
The failed test will have a path to the script\[cq]s log files which you
can view for additional information on the tests.
There will also be log files generated on each node the test is run on.
The log files are split between the server and client of the
cxi_write_bw diagnostic and both can be found in the /tmp directory with
matching PID numbers at the end of the log file names.
.RE
.IP \[bu] 2
When running on a system that is just set up, you may see warnings come
up at the beginning of the run like so:
.RS 2
.IP
.nf
\f[C]
  \[ti]> cxibwcheck.sh nid[000002-000028,000033-000064]
  cxibwcheck.sh: errors in nodelist (see /tmp/cxibwcheck.sh.log.137959) 59 remain*
  cxibwcheck.sh: firmware version: 1.4.275
\f[R]
.fi
.PP
This is due to the added text of asking if you would like to add the ssh
key to the known list.
The test will state that the total number of selected nodes still remain
the same.
This error will go away for subsequent runs.
.RE
.IP \[bu] 2
The test supports 2 alternative methods for running it.
First, if the test is run on a single node, the test will run a local
copy:
.RS 2
.IP
.nf
\f[C]
  \[ti]> cxibwcheck.sh nid000001
  cxibwcheck.sh: cxi0: 40356
  cxibwcheck.sh: cxi1: 40442
\f[R]
.fi
.PP
The other method is to run cxibwcheck with slurm.
This will require a slurm run command or batch script to run the job.
Below is an example slurm run command with allocation of the nodes and
using the slurm broadcast feature to push temporary copies of the script
out to all nodes to run.
Verbosity is also turned up to one (without verbosity the test exits
without any output if all pass):
.IP
.nf
\f[C]
  \[ti]> salloc --nodelist=nid[000006-000020] --ntasks-per-node=1 --exclusive -Q sh -c \[dq]srun ./cxibwcheck.sh -v nid[000006-000020]\[dq]
  nid000016: cxi0: 40320
  nid000012: cxi0: 40122
  nid000013: cxi0: 40876
  nid000020: cxi0: 40809
  nid000010: cxi0: 40835
  nid000018: cxi0: 40634
  nid000007: cxi0: 40769
  nid000014: cxi0: 40305
  nid000006: cxi0: 40807
  nid000017: cxi0: 40643
  nid000019: cxi0: 40781
  nid000008: cxi0: 40607
  nid000015: cxi0: 40600
  nid000011: cxi0: 40406
  nid000009: cxi0: 40529
  nid000016: cxi1: 40699
  nid000012: cxi1: 40715
  nid000013: cxi1: 40308
  nid000010: cxi1: 40683
  nid000020: cxi1: 40674
  nid000006: cxi1: 40483
  nid000018: cxi1: 40621
  nid000007: cxi1: 40830
  nid000014: cxi1: 40594
  nid000019: cxi1: 40585
  nid000008: cxi1: 40751
  nid000017: cxi1: 40580
  nid000015: cxi1: 40579
  nid000009: cxi1: 40604
  nid000011: cxi1: 40669
\f[R]
.fi
.RE
.SH SEE ALSO
.SH AUTHORS
March 2, 2022.
